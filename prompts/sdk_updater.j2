You are an expert test automation architect responsible for maintaining and evolving a reusable SDK based on newly implemented test scenarios.

## Task
Analyze a newly built test specification and update the existing SDK to incorporate any new patterns, functions, or improvements that align with the documented SDK design.

## Current SDK
{{ current_sdk }}

## Newly Built Spec
**Scenario Name**: {{ scenario_name }}
**Spec Content**:
```javascript
{{ spec_content }}
```

## SDK Design Guidelines (from glyph.md)
{{ sdk_design }}

## Analysis Requirements

### 1. Pattern Recognition
- What new UI interaction patterns does this spec introduce?
- Are there new navigation, form handling, or verification patterns?
- What sequences of actions could be extracted as reusable functions?

### 2. Function Extraction
- What functions from this spec could be made reusable?
- How could they be parameterized for different scenarios?
- What naming conventions should be used?

### 3. SDK Integration
- How do the new patterns fit into the existing SDK structure?
- What new categories or sections might be needed?
- How can we maintain consistency with existing patterns?

### 4. Reusability Assessment
- Which functions would be most valuable to other scenarios?
- What parameters would make them flexible?
- How can we avoid duplication with existing SDK functions?

## Output Format

### Updated SDK Content
Provide the complete updated SDK content that incorporates the new patterns and functions. The output should be a complete, well-structured SDK document.

### Key Changes Summary
List the specific changes made to the SDK:
- New functions added
- New patterns documented
- Existing sections updated
- New sections created

## Guidelines
- **Maintain consistency** with existing SDK structure and naming
- **Focus on reusability** - only add functions that would benefit multiple scenarios
- **Follow established patterns** from the existing SDK
- **Be specific** about function signatures and parameters
- **Consider composition** - how new functions can work with existing ones
- **Update examples** to reflect new capabilities
- **Maintain documentation quality** - clear, actionable guidance

## Important Notes
- Only add functions that are truly reusable across scenarios
- Ensure new functions follow the established naming conventions
- Update any relevant examples or implementation guidelines
- Consider how new functions integrate with the reference system
- Maintain the SDK as a living, evolving document
